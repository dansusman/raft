#!/usr/bin/env python

import sys
import socket
import select
import time
import json
import random

LEAD = "leader"
CAND = "candidate"
FOLL = "follower"

# Your ID number
my_id = sys.argv[1]
print(my_id)

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0
# log of potential things to apply
log = []
# store of key:value pairs ("applied")
kvstore = dict()
voted_for = None
current_term = 0
commit_index = 0
last_applied = 0
# Raft uses randomized election timeouts
election_timeout = get_timeout()
leader = "FFFF"
current_role = FOLL


def get_timeout():
    # maybe use random.uniform?
    pass

# Elect a leader -> leader sends initial empty AppendEntires RPCs to all others
#

# Respond to messages based on your role (state of *this* instance/replica)
# 1. Leader:
# -

# 2. Candidate:

# 3. Follower:


while True:
    ready = select.select([sock], [], [], 0.01)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) == 0:
            continue

        msg = json.loads(msg_raw)

        if msg['type'] == 'get':
            message = {"src": my_id, "dst": msg['src'], "leader": "",
                       "type": "fail", "MID": msg['MID']}
            sock.send(json.dumps(msg))
        elif msg['type'] == 'put':
            message = {"src": my_id, "dst": msg['src'], "leader": "",
                       "type": "fail", "MID": msg['MID']}
            sock.send(json.dumps(msg))
        # Handle noop messages. This may be removed from your final implementation
        elif msg['type'] == 'noop':
            print '%s received a NOOP from %s' % msg['dst'], msg['src']

    # clock = time.time()
    # if clock - last > 2:
    #     # Send a no-op message to a random peer every two seconds, just for fun
    #     # You definitely want to remove this from your implementation
    #     msg = {'src': my_id, 'dst': random.choice(
    #         replica_ids), 'leader': 'FFFF', 'type': 'noop'}
    #     sock.send(json.dumps(msg))
    #     print(f'%s received a NOOP from %s', msg['src'], msg['dst'])
    #     last = clock
