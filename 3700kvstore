#!/usr/bin/env python3

import json
import random
import select
import socket
import sys
import time

time.sleep(1.5)


def get_new_elect_timeout(lower, upper):
    """Gets a random election timeout."""
    return random.uniform(lower, upper)


def get_current_time():
    """Gets the current time."""
    return time.time()


def quorum():
    """Gets the number of replicas that forms a quorum."""
    return (len(replica_ids) // 2) + 1


# --------------- Types of Replicas ---------------
LEAD = "leader"
CAND = "candidate"
FOLL = "follower"
# --------------- Types of Messages ---------------
RV = "req_vote"
RVR = "req_vote_response"
AE = "append_entries"
AER = "ae_response"
REDIR = "redirect"
FAIL = "fail"
OK = "ok"
GET = "get"
PUT = "put"
NOOP = "noop"
# --------------- Global Stuff ---------------
# last = 0
HEART_INTERVAL = 0.1  # frequency for sending our heartbeats, in seconds
my_id = sys.argv[1]  # this replica's ID
replica_ids = sys.argv[2:]  # The ID numbers of all the other replicas
kvstore = dict()  # store of key:value pairs ("applied")
# log of operations to apply (GET/PUT) and term
log = [{'op': None, 'term': 0}]
voted_for = None
current_term = 0
commit_index = 0
last_applied = 0
next_idx = {}  # Reinitialized after election, index of the next log entry to send
match_idx = {}  # Reinitialized after election, index of highest log entry known to be replicated
for replica in replica_ids:
    match_idx.setdefault(replica, 0)
    next_idx.setdefault(replica, 1)
heartbeat = get_current_time()
timeout = get_current_time()
current_election_timeout = get_new_elect_timeout(0.25, 0.35)
NOLEAD = "FFFF"
leader = NOLEAD
current_role = FOLL
received_votes = set()  # votes for this replica to become leader
pending_requests = []  # buffer of client requests (messages)
# map from log entry index to follower successes for that message
replicated_entries = {}
replica_clocks = {}

for replica in replica_ids:
    replica_clocks.setdefault(replica, 0)
# -------------------------------------------------
# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
sock.connect(my_id)

SELECT_WAIT_TIME = 0.01  # 10 milliseconds
SEND_WAIT_TIME = 0.025  # 25 milliseconds
TERMINATOR = b'}\n'
buffer = b''


def recv_msgs(sock):
    """Receive messages from the given socket."""
    global buffer

    fresh_buf = sock.recv(32768)

    # is this sock shutting down?
    if len(fresh_buf) == 0:
        return None

    buffer += fresh_buf

    msgs = []
    while TERMINATOR in buffer:
        position = buffer.find(TERMINATOR) + len(TERMINATOR)
        # -1 to remove the \n, which json.loads won't want
        msgs.append(json.loads(buffer[:position - 1].decode()))
        buffer = buffer[position:]

    return msgs


def reached_timeout(time):
    """Returns true if we have elapsed enough time to hit
    the election timeout threshold.
    """
    if current_role == LEAD:
        return False
    return time - timeout >= current_election_timeout


def get_last_term():
    """Returns the term of the last log entry."""
    return log[-1]["term"]


def send_message(message):
    sock.send(json.dumps(message).encode() + b'\n')


def send_request_votes():
    """Send RequestVote RPC to each replica in the system."""
    global leader
    # term, candidateId, lastLogIndex, lastLogTerm
    mes = {
        "term": current_term,
        "candidateId": my_id,
        "lastLogIndex": len(log)-1,
        "lastLogTerm": get_last_term(),
        "src": my_id,
        "leader": leader,
        "type": RV
    }
    for replica in replica_ids:
        mes["dst"] = replica
        send_message(mes)


def log_up_to_date(idx, term):
    """Checks if candidate's log is at least as up-to-date as our log."""
    if get_last_term() != term:
        return get_last_term() <= term
    else:
        return len(log) - 1 <= idx


def send_false_rv(msg):
    """Sends a False RequestVote RPC response."""
    mes = {
        "term": current_term,
        "voteGranted": False,
        "src": my_id,
        "dst": msg["src"],
        "leader": leader,
        "type": RVR
    }
    send_message(mes)


def receive_request_votes(msg):
    """Receive a RequestVote RPC message."""
    global voted_for, leader
    # reply false if term < currentTerm
    # if current_role != FOLL:
    #     send_false_rv(msg)
    # else:
    term = msg["term"]
    if term < current_term:
        #print(my_id, "REJECTED VOTE FOR", msg["src"], "DUE TO OUT OF DATE TERM")
        send_false_rv(msg)
    else:
        if term > current_term:
            voted_for = None
        if log_up_to_date(msg["lastLogIndex"], msg["lastLogTerm"]):
            if voted_for is None or voted_for == msg["src"]:
                voted_for = msg["src"]
                #print(my_id, "VOTED FOR", voted_for)
                mes = {
                    "term": current_term,
                    "voteGranted": True,
                    "src": my_id,
                    "dst": msg["src"],
                    "leader": leader,
                    "type": RVR
                }
                send_message(mes)
                reset_all_timeout()
            else:                
                #print(my_id, "REJECTED VOTE FOR", msg["src"], "DUE TO HAVING VOTED ALREADY")
                send_false_rv(msg)
        else:
            #print(my_id, "REJECTED VOTE FOR", msg["src"], "DUE TO OUT OF DATE LOG")
            send_false_rv(msg)


def reset_all_timeout():
    """Resets global time related stuff."""
    global current_election_timeout, timeout
    if leader == NOLEAD:
        current_election_timeout = get_new_elect_timeout(0.7, 1)
    else:
        current_election_timeout = get_new_elect_timeout(1, 1.2)
    timeout = get_current_time()


def send_append_entries(entries, prev_idx=0):
    """Send out AppendEntries RPCs to all replicas."""
    global heartbeat
    if current_role == LEAD:
        mes = {
            "term": current_term,
            "entries": entries,
            "leaderCommit": commit_index,
            "src": my_id,
            "leader": leader,
            "type": AE,
            "prevLogIndex": prev_idx
        }
        for replica in replica_ids:
            mes["dst"] = replica
            prev_idx = next_idx[replica] - 1
            if (prev_idx > len(log) - 1):
                prev_term = log[len(log) - 1]["term"]
                next_idx[replica] = len(log)
            else:
                prev_term = log[prev_idx]["term"]
            mes["prevLogIndex"] = prev_idx
            mes["prevLogTerm"] = prev_term
            send_message(mes)
        # reset heartbeat
        heartbeat = get_current_time()


def send_batched_entries():
    """Sends out AE RPCs in batches of 128 to replicas."""
    if current_role == LEAD:
        for replica in replica_ids:
            prev_idx = next_idx[replica] - 1
            if (prev_idx > len(log) - 1):
                prev_term = log[len(log) - 1]["term"]
                next_idx[replica] = len(log)
            else:
                prev_term = log[prev_idx]["term"]
            entries = log[prev_idx + 1:]
            entries = entries[:128]
            timeframe = get_current_time() - replica_clocks[replica]
            if timeframe > SEND_WAIT_TIME and match_idx[replica] < len(log) - 1:
                replica_clocks[replica] = get_current_time()
                mes = {
                    "term": current_term,
                    "entries": entries,
                    "leaderCommit": commit_index,
                    "src": my_id,
                    "leader": leader,
                    "type": AE,
                    "prevLogIndex": prev_idx,
                    "dst": replica,
                    "prevLogTerm": prev_term
                }
                send_message(mes)


def send_ae_response(msg, success, prevLogIdx=0, prevLogTerm=0):
    """Send a response to an AppendEntries RPC."""
    mes = {
        "term": current_term,
        "success": success,
        "src": my_id,
        "dst": msg["src"],
        "leader": leader,
        "type": AER,
        "lengthLog": len(log),
        "prevLogIdx": prevLogIdx,
        "prevLogTerm": prevLogTerm,
        "entries": msg["entries"]
    }
    send_message(mes)


def validate_log(msg):
    """Returns true if log contains an entry at prevLogIndex whose
    term matches prevLogTerm.
    """
    prev_idx = msg["prevLogIndex"]
    prev_term = msg["prevLogTerm"]
    if (prev_idx > len(log) - 1):
        return False
    return log[prev_idx]["term"] == prev_term


def send_fail(msg):
    mes = {
        "src": my_id,
        "dst": msg["src"],
        "leader": leader,
        "type": FAIL,
        "MID": msg["MID"],
        "value": msg["value"]
    }
    send_message(mes)


def handle_received_msg(msg):
    """Checks if transition to follower is necessary. Applies change
    if needed.
    """
    global current_role, leader, current_term, voted_for, received_votes
    if "term" in msg and msg["term"] > current_term and "leaderCommit" in msg and commit_index <= msg["leaderCommit"]:
        # if current_role == LEAD and log[commit_index + 1:]:
        #     for entry in log[commit_index + 1:]:
        #         if entry["op"] is not None:
        #             send_fail(entry)
        current_role = FOLL
        leader = msg["leader"]
        current_term = msg["term"]
        voted_for = None
        received_votes = set()
        reset_all_timeout()

def receive_append_entries(msg):
    """Receive an AppendEntries RPC."""
    global leader, current_role, log, commit_index, current_term, voted_for, received_votes
    prev_idx = msg["prevLogIndex"]
    if prev_idx > (len(log) - 1):
        send_ae_response(msg, False, prev_idx) 
    if not validate_log(msg):
        send_ae_response(msg, False, prev_idx)
    elif commit_index > msg["leaderCommit"]:
        """helpful comment"""
        #print("----------------REACHED HERE--------------", my_id, current_role)
        send_ae_response(msg, False, prev_idx)
    elif msg["term"] >= current_term:
        current_role = FOLL
        leader = msg["leader"]
        current_term = msg["term"]
        voted_for = None
        received_votes = set()
        reset_all_timeout()
        if len(msg["entries"]) > 0:
            next_idx = prev_idx + 1
            if next_idx <= (len(log) - 1):
                del log[next_idx:]
            log.extend(msg["entries"])
            send_ae_response(msg, True, prev_idx)
        commit_index = min((len(log) - 1), msg["leaderCommit"])
    else:
        send_ae_response(msg, False, prev_idx)


def receive_append_entries_response(msg):
    """Handle an incoming AE Response message (of type AER)."""
    global next_idx, match_idx, commit_index, pending_gets
    if current_role == LEAD:
        if msg["success"]:
            match_idx[msg["src"]] = msg["prevLogIdx"] + len(msg["entries"])
            next_idx[msg["src"]] = match_idx[msg["src"]] + 1
            sorted_match_idx = list(sorted(match_idx.values()))
            capital_n = sorted_match_idx[-((len(replica_ids) + 1) // 2)]
            # If there exists an N such that N > commitIndex, a majority
            # of matchIndex[i] ≥ N, and log[N].term == currentTerm:
            # set commitIndex = N
            if capital_n < len(log) and commit_index < capital_n and log[capital_n]["term"] == current_term:
                entries = log[commit_index + 1: capital_n + 1]
                commit_index = capital_n
                apply_entries()

                for entry in entries:
                    if entry["term"] == current_term and entry["op"] == PUT:
                        send_ok(entry)

        else:
            next_idx[msg["src"]] = max(1, next_idx[msg['src']] - 1)


def send_ok(entry):
    mes = {
        "src": my_id,
        "dst": entry["src"],
        "leader": leader,
        "type": OK,
        "MID": entry["MID"],
        "value": entry["value"]
    }

    send_message(mes)


def apply_entries():
    """Applies all committed entries."""
    global last_applied
    if commit_index > last_applied:
        apply_log(log[last_applied + 1: commit_index + 1])
        last_applied = commit_index


def apply_log(entries):
    """Adds given PUT entries to the store."""
    for entry in entries:
        if entry["op"] == PUT:
            handle_put(entry, False)


def receive_req_vote_response(msg):
    """Receive and handle a response to a RequestVote RPC."""
    global received_votes, leader, current_role, heartbeat
    if current_role == CAND:
        if msg["voteGranted"]:
            received_votes.add(msg["src"])
            if len(received_votes) >= quorum():
                print("WE HAVE A WINNER", my_id, len(received_votes), received_votes)
                leader = my_id
                current_role = LEAD
                received_votes = set()
                # reset timeout
                heartbeat = get_current_time()
                for replica in replica_ids:
                    next_idx[replica] = commit_index + 1
                    match_idx[replica] = 0
                # apply_entries()
                # send out empty AppendEntries RPC heartbeats
                send_append_entries([])


def trigger_election(time):
    """Starts an election if a timeout is reached."""
    global current_term, current_role, voted_for, current_election_timeout, leader, received_votes
    if current_role != LEAD and reached_timeout(time):
        # reset state
        #print("TRIGGERED ELECTION", my_id)
        current_role = CAND
        leader = NOLEAD
        reset_all_timeout()
        current_term += 1
        voted_for = my_id
        received_votes = set()
        received_votes.add(my_id)
        #print("INITIAL VOTES:", received_votes)
        # send out "Vote for me!" messages
        send_request_votes()


def handle_put(msg, send=True):
    """Updates KVStore with new information and replies to client."""
    if msg["key"] in kvstore:
        kvstore[msg["key"]] = msg["value"]
    else:
        kvstore.setdefault(msg["key"], msg["value"])
    if current_role == LEAD and send:
        mes = {
            "src": my_id,
            "dst": msg["src"],
            "leader": leader,
            "type": OK,
            "MID": msg["MID"],
            "value": msg["value"]
        }
        send_message(mes)


def handle_get(msg):
    """Attempts to retrieve value from KVStore and replies to client."""
    mes = {
        "src": my_id,
        "dst": msg["src"],
        "leader": leader,
        "type": OK,
        "MID": msg["MID"],
        "value": ""
    }
    if kvstore.get(msg["key"]):
        mes["value"] = kvstore.get(msg["key"])
    send_message(mes)


def handle_get_put(msg):
    """Handle GET/PUT messages from clients."""
    if current_role == LEAD:
        if msg["type"] == PUT:
            if msg["key"] in kvstore and kvstore[msg["key"]] == msg["value"]:
                # already present in our store and no change needed
                handle_put(msg)
            else:
                entry = {
                    "op": msg["type"],
                    "term": current_term,
                    "src": msg["src"],
                    "MID": msg["MID"],
                    "key": msg["key"],
                    "value": msg["value"],
                }
                log.append(entry)
        else:
            handle_get(msg)
    elif current_role == CAND or leader == NOLEAD:
        pending_requests.append(msg)
    else:
        mes = {
            "src": my_id,
            "dst": msg["src"],
            "leader": leader,
            "MID": msg["MID"],
            "type": REDIR
        }
        send_message(mes)


def dispatch(msg):
    """Deals with message appropriately based on type."""
    msg_type = msg["type"]
    # if current_role == LEAD:
    #     print(my_id, len(log), commit_index, last_applied)
    if msg_type in [GET, PUT]:
        # handle_received_msg(msg)
        handle_get_put(msg)
    elif msg_type == AE:
        handle_received_msg(msg)
        receive_append_entries(msg)
    elif msg_type == AER:
        handle_received_msg(msg)
        receive_append_entries_response(msg)
    elif msg_type == RV:
        receive_request_votes(msg)
    elif msg_type == RVR:
        receive_req_vote_response(msg)
    elif msg_type == NOOP:
        print(f"{msg['dst']} received a NOOP from {msg['src']}")
    else:
        print("Something Bad Happened! Unknown message type:", msg_type)

while True:

    # # try to respond to previous messages
    # for message in client_buff:
    #     dispatch(message)
    # for message in replica_buff:
    #     dispatch(message)

    # check for election timeouts
    curr_time = get_current_time()
    trigger_election(curr_time)
    if curr_time - heartbeat >= HEART_INTERVAL:
        send_append_entries([])

    send_batched_entries()

    apply_entries()

    # check for open socket
    ready = select.select([sock], [], [], SELECT_WAIT_TIME)[0]

    # grab and dispatch new messages
    if sock in ready:
        msgs = recv_msgs(sock)
        pending_requests.extend(msgs)
        for _ in range(2):
            if len(pending_requests) > 0:
                dispatch(pending_requests.pop(0))

        # for request in pending_requests:
        #     dispatch(request)
        # pending_requests = []


# TODO:
# adv-2 and adv-3 are failing - leader failures with dropped packets
#
#